import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext, simpledialog
import random
import string
import hashlib
import base64
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import hashes, serialization
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.backends import default_backend
import os
import json
import time

class BankingEncryptionGame:
    def __init__(self, root):
        self.root = root
        self.root.title("Game H·ªá th·ªëng M√£ h√≥a Ng√¢n h√†ng")
        self.root.geometry("1000x700")
        self.root.configure(bg='#f0f0f0')
        
        # Game state
        self.level = 1
        self.score = 0
        self.transactions_processed = 0
        self.current_transaction = None
        self.rsa_private_key = None
        self.rsa_public_key = None
        self.timer_seconds = 30
        self.timer_running = False
        self.timer_id = None
        self.lich_su_giao_dich = []
        self.achievements = {
            "3_success": False,
            "1000_points": False,
            "level_5": False
        }
        self.success_streak = 0
        self.high_score = self.load_high_score()
        self.adaptive_timer = 30
        self.mini_game_counter = 0
        self.ten_nguoi_choi = self.nhap_ten_nguoi_choi()
        self.leaderboard = self.load_leaderboard()
        
        # Theme colors
        self.colors = {
            'primary': '#2c3e50',      # Dark blue
            'secondary': '#34495e',    # Lighter blue
            'success': '#27ae60',      # Green
            'warning': '#f39c12',      # Orange
            'danger': '#e74c3c',       # Red
            'info': '#3498db',         # Light blue
            'light': '#ecf0f1',        # Light gray
            'dark': '#2c3e50',         # Dark
            'white': '#ffffff',        # White
            'yellow': '#f1c40f'        # Yellow for timer
        }
        
        # Generate RSA keys
        self.generate_rsa_keys()
        
        # Create main interface
        self.create_interface()
        
        # Generate first transaction
        self.generate_new_transaction()
    
    def generate_rsa_keys(self):
        """Generate RSA key pair"""
        self.rsa_private_key = rsa.generate_private_key(
            public_exponent=65537,
            key_size=2048,
            backend=default_backend()
        )
        self.rsa_public_key = self.rsa_private_key.public_key()
    
    def create_interface(self):
        """Create main game interface with improved design"""
        # Header v·ªõi gradient effect
        header_frame = tk.Frame(self.root, bg=self.colors['primary'], height=100)
        header_frame.pack(fill='x', padx=10, pady=(10, 5))
        header_frame.pack_propagate(False)
        
        # Logo v√† title v·ªõi style m·ªõi
        title_frame = tk.Frame(header_frame, bg=self.colors['primary'])
        title_frame.pack(expand=True)
        
        title_label = tk.Label(title_frame, text="üè¶", font=('Arial', 24), 
                              fg=self.colors['white'], bg=self.colors['primary'])
        title_label.pack()
        
        title_text = tk.Label(title_frame, text="QU·∫¢N TR·ªä VI√äN B·∫¢O M·∫¨T NG√ÇN H√ÄNG", 
                             font=('Arial', 16, 'bold'), fg=self.colors['white'], 
                             bg=self.colors['primary'])
        title_text.pack()
        
        subtitle = tk.Label(title_frame, text="B·∫£o v·ªá giao d·ªãch t√†i ch√≠nh v·ªõi c√¥ng ngh·ªá m√£ h√≥a ti√™n ti·∫øn", 
                           font=('Arial', 10), fg=self.colors['light'], 
                           bg=self.colors['primary'])
        subtitle.pack()
        
        # Status bar v·ªõi design m·ªõi
        status_frame = tk.Frame(self.root, bg=self.colors['secondary'], height=60)
        status_frame.pack(fill='x', padx=10, pady=5)
        status_frame.pack_propagate(False)
        
        # Status items v·ªõi style m·ªõi
        status_items = [
            (f"üë§ {self.ten_nguoi_choi}", 'left'),
            (f"üìä C·∫•p ƒë·ªô: {self.level}", 'left'),
            (f"üí∞ ƒêi·ªÉm: {self.score}", 'left'),
            (f"üìà ƒêi·ªÉm cao nh·∫•t: {self.high_score}", 'right'),
            (f"‚è∞ Th·ªùi gian: {self.timer_seconds}s", 'right'),
            (f"üîÑ Giao d·ªãch: {self.transactions_processed}", 'right')
        ]
        
        for text, side in status_items:
            label = tk.Label(status_frame, text=text, font=('Arial', 11, 'bold'), 
                           fg=self.colors['white'], bg=self.colors['secondary'])
            label.pack(side=side, padx=15, pady=15)
            if 'Th·ªùi gian' in text:
                self.timer_label = label
            elif 'C·∫•p ƒë·ªô' in text:
                self.level_label = label
            elif 'ƒêi·ªÉm:' in text and 'cao nh·∫•t' not in text:
                self.score_label = label
            elif 'ƒêi·ªÉm cao nh·∫•t' in text:
                self.high_score_label = label
            elif 'Giao d·ªãch:' in text:
                self.processed_label = label
        
        # Main content area v·ªõi layout m·ªõi
        main_frame = tk.Frame(self.root, bg=self.colors['light'])
        main_frame.pack(fill='both', expand=True, padx=10, pady=5)
        
        # Left panel - Transaction details v·ªõi style m·ªõi
        left_frame = tk.LabelFrame(main_frame, text="üîÑ Giao d·ªãch m·ªõi c·∫ßn x·ª≠ l√Ω", 
                                  font=('Arial', 12, 'bold'), bg=self.colors['light'], 
                                  fg=self.colors['primary'], relief='raised', bd=2)
        left_frame.pack(side='left', fill='both', expand=True, padx=(0, 5))
        
        # Transaction display v·ªõi style m·ªõi
        self.transaction_text = scrolledtext.ScrolledText(left_frame, height=12, width=45,
                                                         font=('Courier', 10), 
                                                         bg=self.colors['white'],
                                                         fg=self.colors['dark'],
                                                         relief='sunken', bd=1)
        self.transaction_text.pack(padx=15, pady=15, fill='both', expand=True)
        
        # Processing buttons v·ªõi style m·ªõi v√† hover effects
        button_frame = tk.Frame(left_frame, bg=self.colors['light'])
        button_frame.pack(fill='x', padx=15, pady=10)
        
        # Button styles v·ªõi hover effects
        button_styles = [
            ("üîê M√£ h√≥a AES", self.encrypt_aes, self.colors['info'], tk.NORMAL),
            ("‚úçÔ∏è X√°c th·ª±c RSA", self.authenticate_rsa, self.colors['danger'], tk.DISABLED),
            ("üîç Ki·ªÉm tra SHA", self.check_integrity_sha, self.colors['warning'], tk.DISABLED),
            ("‚úÖ Ho√†n t·∫•t giao d·ªãch", self.complete_transaction, self.colors['success'], tk.DISABLED)
        ]
        
        self.buttons = {}
        for text, command, color, state in button_styles:
            btn = tk.Button(button_frame, text=text, command=command, 
                           bg=color, fg=self.colors['white'],
                           font=('Arial', 11, 'bold'), state=state,
                           relief='raised', bd=2, padx=20, pady=8)
            btn.pack(fill='x', pady=3)
            
            # Hover effects
            btn.bind('<Enter>', lambda e, b=btn, c=color: self.on_button_hover(b, c, True))
            btn.bind('<Leave>', lambda e, b=btn, c=color: self.on_button_hover(b, c, False))
            
            # Store button references
            if 'AES' in text:
                self.aes_button = btn
            elif 'RSA' in text:
                self.rsa_button = btn
            elif 'SHA' in text:
                self.sha_button = btn
            elif 'Ho√†n t·∫•t' in text:
                self.complete_button = btn
        
        # Right panel - Processing results v·ªõi style m·ªõi
        right_frame = tk.LabelFrame(main_frame, text="üìä K·∫øt qu·∫£ x·ª≠ l√Ω v√† ph·∫£n h·ªìi", 
                                   font=('Arial', 12, 'bold'), bg=self.colors['light'], 
                                   fg=self.colors['primary'], relief='raised', bd=2)
        right_frame.pack(side='right', fill='both', expand=True, padx=(5, 0))
        
        # Results display v·ªõi style m·ªõi
        self.result_text = scrolledtext.ScrolledText(right_frame, height=18, width=55,
                                                    font=('Courier', 9), 
                                                    bg=self.colors['white'],
                                                    fg=self.colors['dark'],
                                                    relief='sunken', bd=1)
        self.result_text.pack(padx=15, pady=15, fill='both', expand=True)
        
        # Control buttons v·ªõi style m·ªõi
        control_frame = tk.Frame(right_frame, bg=self.colors['light'])
        control_frame.pack(fill='x', padx=15, pady=10)
        
        # Control button styles
        control_buttons = [
            ("üîÑ Giao d·ªãch m·ªõi", self.generate_new_transaction, self.colors['info']),
            ("üóÇ L·ªãch s·ª≠ giao d·ªãch", self.show_history, self.colors['warning']),
            ("üèÜ B·∫£ng x·∫øp h·∫°ng", self.show_leaderboard, self.colors['success']),
            ("‚ùì H∆∞·ªõng d·∫´n", self.show_help, self.colors['secondary'])
        ]
        
        for text, command, color in control_buttons:
            btn = tk.Button(control_frame, text=text, command=command, 
                           bg=color, fg=self.colors['white'],
                           font=('Arial', 10, 'bold'), relief='raised', bd=2, padx=15, pady=5)
            btn.pack(side='left', padx=5)
            
            # Hover effects
            btn.bind('<Enter>', lambda e, b=btn, c=color: self.on_button_hover(b, c, True))
            btn.bind('<Leave>', lambda e, b=btn, c=color: self.on_button_hover(b, c, False))
            
            # Store references
            if 'Giao d·ªãch m·ªõi' in text:
                self.new_transaction_button = btn
            elif 'L·ªãch s·ª≠' in text:
                self.history_button = btn
            elif 'B·∫£ng x·∫øp h·∫°ng' in text:
                self.leaderboard_button = btn
            elif 'H∆∞·ªõng d·∫´n' in text:
                self.help_button = btn
    
    def generate_new_transaction(self):
        """Generate a new random transaction"""
        account_numbers = [f"{random.randint(1000000000, 9999999999)}" for _ in range(2)]
        amount = random.randint(100000, 50000000)
        
        self.current_transaction = {
            'id': f"TXN{random.randint(100000, 999999)}",
            'from_account': account_numbers[0],
            'to_account': account_numbers[1],
            'amount': amount,
            'description': f"Chuy·ªÉn kho·∫£n {amount:,} VND",
            'timestamp': time.strftime("%Y-%m-%d %H:%M:%S"),
            'encrypted_data': None,
            'rsa_signature': None,
            'sha_hash': None,
            'steps_completed': []
        }
        
        # Display transaction
        transaction_info = f"""
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        GIAO D·ªäCH M·ªöI C·∫¶N X·ª¨ L√ù
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

ID Giao d·ªãch: {self.current_transaction['id']}
T·ª´ t√†i kho·∫£n: {self.current_transaction['from_account']}
ƒê·∫øn t√†i kho·∫£n: {self.current_transaction['to_account']}
S·ªë ti·ªÅn: {self.current_transaction['amount']:,} VND
M√¥ t·∫£: {self.current_transaction['description']}
Th·ªùi gian: {self.current_transaction['timestamp']}

‚ö†Ô∏è  TR·∫†NG TH√ÅI: Ch∆∞a ƒë∆∞·ª£c b·∫£o m·∫≠t
‚ö†Ô∏è  C·∫¶N TH·ª∞C HI·ªÜN: M√£ h√≥a AES ‚Üí X√°c th·ª±c RSA ‚Üí Ki·ªÉm tra SHA

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
"""
        
        self.transaction_text.delete(1.0, tk.END)
        self.transaction_text.insert(1.0, transaction_info)
        
        # Reset buttons
        self.aes_button.config(state='normal', bg='#3498db')
        self.rsa_button.config(state='disabled', bg='#bdc3c7')
        self.sha_button.config(state='disabled', bg='#bdc3c7')
        self.complete_button.config(state='disabled', bg='#bdc3c7')
        
        # Clear results
        self.result_text.delete(1.0, tk.END)
        self.result_text.insert(1.0, "üéØ B·∫Øt ƒë·∫ßu b·∫±ng vi·ªác m√£ h√≥a giao d·ªãch v·ªõi AES...\n\n")
        
        self.start_timer(self.adaptive_timer)
        self.mini_game_counter += 1
        if self.mini_game_counter % 3 == 0:
            self.show_mini_game()
    
    def encrypt_aes(self):
        """Encrypt transaction data using AES"""
        if not self.current_transaction:
            return
        
        # Create AES key
        aes_key = os.urandom(32)  # 256-bit key
        iv = os.urandom(16)  # 128-bit IV
        
        # Prepare data to encrypt
        data_to_encrypt = json.dumps({
            'id': self.current_transaction['id'],
            'from_account': self.current_transaction['from_account'],
            'to_account': self.current_transaction['to_account'],
            'amount': self.current_transaction['amount'],
            'timestamp': self.current_transaction['timestamp']
        }).encode('utf-8')
        
        # Encrypt using AES
        cipher = Cipher(algorithms.AES(aes_key), modes.CBC(iv), backend=default_backend())
        encryptor = cipher.encryptor()
        
        # Pad data to be multiple of 16 bytes
        pad_length = 16 - (len(data_to_encrypt) % 16)
        padded_data = data_to_encrypt + bytes([pad_length] * pad_length)
        
        encrypted_data = encryptor.update(padded_data) + encryptor.finalize()
        
        # Store encrypted data
        self.current_transaction['encrypted_data'] = base64.b64encode(encrypted_data).decode('utf-8')
        self.current_transaction['aes_key'] = base64.b64encode(aes_key).decode('utf-8')
        self.current_transaction['aes_iv'] = base64.b64encode(iv).decode('utf-8')
        self.current_transaction['steps_completed'].append('AES')
        
        # Update UI
        result = f"""
üîê M√É H√ìA AES TH√ÄNH C√îNG!
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚úÖ D·ªØ li·ªáu giao d·ªãch ƒë√£ ƒë∆∞·ª£c m√£ h√≥a b·∫£o m·∫≠t
üîë Kh√≥a AES: {self.current_transaction['aes_key'][:32]}...
üî¢ IV: {self.current_transaction['aes_iv'][:32]}...
üì¶ D·ªØ li·ªáu m√£ h√≥a: {self.current_transaction['encrypted_data'][:50]}...

‚è© B∆Ø·ªöC TI·∫æP THEO: X√°c th·ª±c RSA ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh x√°c th·ª±c

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

"""
        
        self.result_text.insert(tk.END, result)
        self.result_text.see(tk.END)
        
        # Enable next step
        self.aes_button.config(state='disabled', bg='#27ae60', text='‚úÖ AES Ho√†n t·∫•t')
        self.rsa_button.config(state='normal', bg='#e74c3c')
    
    def authenticate_rsa(self):
        """Authenticate transaction using RSA signature"""
        if not self.current_transaction or 'AES' not in self.current_transaction['steps_completed']:
            return
        
        # Create message to sign (transaction summary)
        message = f"{self.current_transaction['id']}{self.current_transaction['amount']}{self.current_transaction['timestamp']}"
        message_bytes = message.encode('utf-8')
        
        # Create RSA signature
        signature = self.rsa_private_key.sign(
            message_bytes,
            padding.PSS(
                mgf=padding.MGF1(hashes.SHA256()),
                salt_length=padding.PSS.MAX_LENGTH
            ),
            hashes.SHA256()
        )
        
        self.current_transaction['rsa_signature'] = base64.b64encode(signature).decode('utf-8')
        self.current_transaction['signed_message'] = message
        self.current_transaction['steps_completed'].append('RSA')
        
        # Verify signature (simulation)
        try:
            self.rsa_public_key.verify(
                signature,
                message_bytes,
                padding.PSS(
                    mgf=padding.MGF1(hashes.SHA256()),
                    salt_length=padding.PSS.MAX_LENGTH
                ),
                hashes.SHA256()
            )
            verification_status = "‚úÖ X√ÅC TH·ª∞C TH√ÄNH C√îNG"
        except:
            verification_status = "‚ùå X√ÅC TH·ª∞C TH·∫§T B·∫†I"
        
        # Update UI
        result = f"""
‚úçÔ∏è X√ÅC TH·ª∞C RSA TH√ÄNH C√îNG!
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚úÖ Ch·ªØ k√Ω s·ªë ƒë√£ ƒë∆∞·ª£c t·∫°o v√† x√°c th·ª±c
üìù Th√¥ng ƒëi·ªáp k√Ω: {message}
üîè Ch·ªØ k√Ω RSA: {self.current_transaction['rsa_signature'][:50]}...
{verification_status}

‚è© B∆Ø·ªöC TI·∫æP THEO: Ki·ªÉm tra t√≠nh to√†n v·∫πn b·∫±ng SHA

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

"""
        
        self.result_text.insert(tk.END, result)
        self.result_text.see(tk.END)
        
        # Enable next step
        self.rsa_button.config(state='disabled', bg='#27ae60', text='‚úÖ RSA Ho√†n t·∫•t')
        self.sha_button.config(state='normal', bg='#f39c12')
    
    def check_integrity_sha(self):
        """Check transaction integrity using SHA hash"""
        if not self.current_transaction or 'RSA' not in self.current_transaction['steps_completed']:
            return
        
        # Create hash of the entire transaction data
        transaction_data = json.dumps({
            'id': self.current_transaction['id'],
            'encrypted_data': self.current_transaction['encrypted_data'],
            'rsa_signature': self.current_transaction['rsa_signature'],
            'timestamp': self.current_transaction['timestamp']
        }, sort_keys=True).encode('utf-8')
        
        # Generate SHA-256 hash
        sha_hash = hashlib.sha256(transaction_data).hexdigest()
        self.current_transaction['sha_hash'] = sha_hash
        self.current_transaction['steps_completed'].append('SHA')
        
        # Simulate integrity check
        verification_hash = hashlib.sha256(transaction_data).hexdigest()
        integrity_status = "‚úÖ T√çNH TO√ÄN V·∫∏N ƒê·∫¢M B·∫¢O" if sha_hash == verification_hash else "‚ùå T√çNH TO√ÄN V·∫∏N KH√îNG ƒê·∫¢M B·∫¢O"
        
        # Update UI
        result = f"""
üîç KI·ªÇM TRA T√çNH TO√ÄN V·∫∏N SHA TH√ÄNH C√îNG!
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚úÖ M√£ hash SHA-256 ƒë√£ ƒë∆∞·ª£c t·∫°o
üîó Hash SHA-256: {sha_hash}
üîç Ki·ªÉm tra: {integrity_status}

‚è© B∆Ø·ªöC CU·ªêI: Ho√†n t·∫•t giao d·ªãch

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

"""
        
        self.result_text.insert(tk.END, result)
        self.result_text.see(tk.END)
        
        # Enable completion
        self.sha_button.config(state='disabled', bg='#27ae60', text='‚úÖ SHA Ho√†n t·∫•t')
        self.complete_button.config(state='normal', bg='#27ae60')
    
    def complete_transaction(self):
        """Complete the transaction and update score"""
        if not self.current_transaction or len(self.current_transaction['steps_completed']) != 3:
            return
        
        self.stop_timer()
        # Calculate score based on level and completion
        base_score = 100
        level_bonus = self.level * 50
        completion_bonus = 200 if len(self.current_transaction['steps_completed']) == 3 else 0
        
        earned_score = base_score + level_bonus + completion_bonus
        self.score += earned_score
        self.transactions_processed += 1
        
        # Adaptive difficulty: n·∫øu ng∆∞·ªùi ch∆°i l√†m t·ªët, gi·∫£m th·ªùi gian
        if self.success_streak >= 3 and self.adaptive_timer > 10:
            self.adaptive_timer -= 2
        
        # L∆∞u l·ªãch s·ª≠ giao d·ªãch
        self.current_transaction['result'] = 'Th√†nh c√¥ng'
        self.current_transaction['score'] = earned_score
        self.lich_su_giao_dich.append(self.current_transaction.copy())
        
        # C·∫≠p nh·∫≠t high score
        if self.score > self.high_score:
            self.high_score = self.score
            self.save_high_score()
        
        # Th√†nh t·ª±u
        self.success_streak += 1
        self.check_achievements()
        
        # ThƒÉng c·∫•p
        if self.transactions_processed % 3 == 0:
            self.level += 1
            messagebox.showinfo("ThƒÉng c·∫•p!", f"üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ l√™n c·∫•p ƒë·ªô {self.level}!")
        
        self.update_status_bar()
        self.cap_nhat_leaderboard()
        
        result = f"""
üéâ GIAO D·ªäCH HO√ÄN T·∫§T!
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚úÖ Giao d·ªãch {self.current_transaction['id']} ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng!
üîê M√£ h√≥a AES: Ho√†n t·∫•t
‚úçÔ∏è X√°c th·ª±c RSA: Ho√†n t·∫•t  
üîç Ki·ªÉm tra SHA: Ho√†n t·∫•t

üí∞ ƒêi·ªÉm th∆∞·ªüng: +{earned_score} ƒëi·ªÉm
üìä T·ªïng ƒëi·ªÉm: {self.score} ƒëi·ªÉm
üìà C·∫•p ƒë·ªô: {self.level}

üîÑ Nh·∫•n 'Giao d·ªãch m·ªõi' ƒë·ªÉ ti·∫øp t·ª•c...

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

"""
        
        self.result_text.insert(tk.END, result)
        self.result_text.see(tk.END)
        
        # Disable all processing buttons
        self.complete_button.config(state='disabled', bg='#bdc3c7')
    
    def update_status_bar(self):
        """Update the status bar with current game state"""
        self.level_label.config(text=f"üìä C·∫•p ƒë·ªô: {self.level}")
        self.score_label.config(text=f"üí∞ ƒêi·ªÉm: {self.score}")
        self.processed_label.config(text=f"üîÑ Giao d·ªãch: {self.transactions_processed}")
        self.high_score_label.config(text=f"üìà ƒêi·ªÉm cao nh·∫•t: {self.high_score}")
    
    def show_help(self):
        """Show help dialog"""
        help_text = """
üè¶ H∆Ø·ªöNG D·∫™N GAME H·ªÜ TH·ªêNG M√É H√ìA NG√ÇN H√ÄNG

üéØ M·ª§C TI√äU:
B·∫°n l√† qu·∫£n tr·ªã vi√™n b·∫£o m·∫≠t ng√¢n h√†ng. Nhi·ªám v·ª• c·ªßa b·∫°n l√† b·∫£o v·ªá m·ªçi giao d·ªãch 
b·∫±ng c√°ch th·ª±c hi·ªán 3 b∆∞·ªõc b·∫£o m·∫≠t quan tr·ªçng.

üîÑ C√ÅC B∆Ø·ªöC X·ª¨ L√ù:
1. üîê M√É H√ìA AES: B·∫£o v·ªá th√¥ng tin t√†i ch√≠nh b·∫±ng m√£ h√≥a m·∫°nh
2. ‚úçÔ∏è X√ÅC TH·ª∞C RSA: T·∫°o ch·ªØ k√Ω s·ªë ƒë·ªÉ x√°c th·ª±c giao d·ªãch
3. üîç KI·ªÇM TRA SHA: ƒê·∫£m b·∫£o t√≠nh to√†n v·∫πn c·ªßa d·ªØ li·ªáu

üìä H·ªÜ TH·ªêNG ƒêI·ªÇM:
- M·ªói b∆∞·ªõc ho√†n th√†nh: 100 ƒëi·ªÉm c∆° b·∫£n
- Th∆∞·ªüng c·∫•p ƒë·ªô: C·∫•p ƒë·ªô √ó 50 ƒëi·ªÉm
- Ho√†n th√†nh ƒë·ªß 3 b∆∞·ªõc: +200 ƒëi·ªÉm th∆∞·ªüng
- M·ªói 3 giao d·ªãch ho√†n th√†nh s·∫Ω thƒÉng c·∫•p

‚ö° TIPS:
- Ph·∫£i ho√†n th√†nh c√°c b∆∞·ªõc theo ƒë√∫ng th·ª© t·ª±
- C√†ng l√™n c·∫•p cao, giao d·ªãch c√†ng ph·ª©c t·∫°p
- Ch√∫ √Ω ƒë·ªçc k·ªπ th√¥ng tin t·ª´ng b∆∞·ªõc ƒë·ªÉ hi·ªÉu thu·∫≠t to√°n

Ch√∫c b·∫°n b·∫£o v·ªá th√†nh c√¥ng h·ªá th·ªëng ng√¢n h√†ng! üõ°Ô∏è
"""
        messagebox.showinfo("H∆∞·ªõng d·∫´n", help_text)

    def start_timer(self, seconds=None):
        if seconds is None:
            seconds = self.adaptive_timer
        self.timer_seconds = seconds
        self.timer_running = True
        self.update_timer_label()
        self.countdown()

    def countdown(self):
        if self.timer_running:
            self.timer_label.config(text=f"‚è∞ Th·ªùi gian: {self.timer_seconds}s")
            if self.timer_seconds > 0:
                self.timer_seconds -= 1
                self.timer_id = self.root.after(1000, self.countdown)
            else:
                self.timer_running = False
                self.timer_label.config(text="‚è∞ H·∫øt gi·ªù!")
                self.handle_timeout()

    def stop_timer(self):
        self.timer_running = False
        if self.timer_id:
            self.root.after_cancel(self.timer_id)
            self.timer_id = None

    def update_timer_label(self):
        if hasattr(self, 'timer_label') and self.timer_label:
            self.timer_label.config(text=f"‚è∞ Th·ªùi gian: {self.timer_seconds}s")
            # Thay ƒë·ªïi m√†u khi th·ªùi gian s·∫Øp h·∫øt
            if self.timer_seconds <= 10:
                self.timer_label.config(fg='red')
            elif self.timer_seconds <= 20:
                self.timer_label.config(fg='orange')
            else:
                self.timer_label.config(fg=self.colors['yellow'])

    def load_high_score(self):
        try:
            if os.path.exists("highscore.json"):
                with open("highscore.json", "r") as f:
                    return json.load(f).get("high_score", 0)
        except:
            pass
        return 0

    def save_high_score(self):
        try:
            with open("highscore.json", "w") as f:
                json.dump({"high_score": self.high_score}, f)
        except:
            pass

    def show_leaderboard(self):
        if not self.leaderboard:
            messagebox.showinfo("B·∫£ng x·∫øp h·∫°ng", "Ch∆∞a c√≥ ng∆∞·ªùi ch∆°i n√†o.")
            return
        sorted_lb = sorted(self.leaderboard.items(), key=lambda x: x[1], reverse=True)
        text = "üèÜ TOP 5 NG∆Ø·ªúI CH∆†I ƒêI·ªÇM CAO NH·∫§T:\n\n"
        for i, (ten, diem) in enumerate(sorted_lb[:5]):
            text += f"{i+1}. {ten}: {diem} ƒëi·ªÉm\n"
        messagebox.showinfo("B·∫£ng x·∫øp h·∫°ng", text)

    def show_history(self):
        if not self.lich_su_giao_dich:
            messagebox.showinfo("L·ªãch s·ª≠ giao d·ªãch", "Ch∆∞a c√≥ giao d·ªãch n√†o ƒë∆∞·ª£c l∆∞u.")
            return
        history_win = tk.Toplevel(self.root)
        history_win.title("L·ªãch s·ª≠ giao d·ªãch")
        history_win.geometry("600x400")
        lb = tk.Listbox(history_win, font=("Courier", 10))
        lb.pack(fill='both', expand=True)
        for idx, gd in enumerate(self.lich_su_giao_dich):
            lb.insert(tk.END, f"{idx+1}. {gd['id']} | {gd['amount']:,} VND | {gd['result']}")
        def show_detail(event):
            sel = lb.curselection()
            if sel:
                gd = self.lich_su_giao_dich[sel[0]]
                detail = json.dumps(gd, indent=2, ensure_ascii=False)
                messagebox.showinfo("Chi ti·∫øt giao d·ªãch", detail)
        lb.bind('<Double-1>', show_detail)

    def handle_timeout(self):
        self.result_text.insert(tk.END, "\n‚è∞ H·∫æT GI·ªú! Giao d·ªãch b·ªã h·ªßy, b·∫°n kh√¥ng ƒë∆∞·ª£c c·ªông ƒëi·ªÉm.\n")
        self.result_text.see(tk.END)
        self.aes_button.config(state='disabled')
        self.rsa_button.config(state='disabled')
        self.sha_button.config(state='disabled')
        self.complete_button.config(state='disabled')
        if self.current_transaction:
            self.current_transaction['result'] = 'H·∫øt gi·ªù'
            self.current_transaction['score'] = 0
            self.lich_su_giao_dich.append(self.current_transaction.copy())
        self.success_streak = 0
        if self.adaptive_timer < 30:
            self.adaptive_timer += 2

    def check_achievements(self):
        if not self.achievements["3_success"] and self.success_streak >= 3:
            self.achievements["3_success"] = True
            messagebox.showinfo("Th√†nh t·ª±u!", "üèÖ Th√†nh t·ª±u: 3 giao d·ªãch li√™n ti·∫øp th√†nh c√¥ng!")
        if not self.achievements["1000_points"] and self.score >= 1000:
            self.achievements["1000_points"] = True
            messagebox.showinfo("Th√†nh t·ª±u!", "üèÖ Th√†nh t·ª±u: ƒê·∫°t 1000 ƒëi·ªÉm!")
        if not self.achievements["level_5"] and self.level >= 5:
            self.achievements["level_5"] = True
            messagebox.showinfo("Th√†nh t·ª±u!", "üèÖ Th√†nh t·ª±u: L√™n c·∫•p 5!")

    def show_mini_game(self):
        mini_win = tk.Toplevel(self.root)
        mini_win.title("Mini-game b·∫£o m·∫≠t")
        mini_win.geometry("500x300")
        ds_cau_hoi = [
            ("Thu·∫≠t to√°n n√†o d√πng ƒë·ªÉ ki·ªÉm tra t√≠nh to√†n v·∫πn?", "SHA"),
            ("Thu·∫≠t to√°n n√†o d√πng ƒë·ªÉ m√£ h√≥a ƒë·ªëi x·ª©ng?", "AES"),
            ("Thu·∫≠t to√°n n√†o d√πng ƒë·ªÉ x√°c th·ª±c ch·ªØ k√Ω s·ªë?", "RSA"),
            ("M√£ h√≥a n√†o nhanh h∆°n cho d·ªØ li·ªáu l·ªõn?", "AES"),
            ("Ch·ªØ k√Ω s·ªë d√πng thu·∫≠t to√°n n√†o?", "RSA"),
            ("Thu·∫≠t to√°n n√†o KH√îNG ph·∫£i l√† m√£ h√≥a ƒë·ªëi x·ª©ng?", "RSA"),
            ("SHA l√† vi·∫øt t·∫Øt c·ªßa?", "Secure Hash Algorithm"),
            ("AES l√† vi·∫øt t·∫Øt c·ªßa?", "Advanced Encryption Standard"),
            ("RSA l√† vi·∫øt t·∫Øt c·ªßa t√™n 3 nh√† khoa h·ªçc n√†o?", "Rivest Shamir Adleman"),
            ("Thu·∫≠t to√°n n√†o d√πng kh√≥a c√¥ng khai v√† kh√≥a b√≠ m·∫≠t?", "RSA"),
            ("Thu·∫≠t to√°n n√†o th∆∞·ªùng d√πng ƒë·ªÉ m√£ h√≥a m·∫≠t kh·∫©u l∆∞u tr·ªØ?", "SHA"),
            ("ECC l√† vi·∫øt t·∫Øt c·ªßa?", "Elliptic Curve Cryptography"),
            ("Blockchain d√πng thu·∫≠t to√°n bƒÉm n√†o ph·ªï bi·∫øn?", "SHA256"),
            ("Thu·∫≠t to√°n n√†o KH√îNG d√πng trong game n√†y?", "DES"),
            ("Thu·∫≠t to√°n n√†o c√≥ th·ªÉ d√πng ƒë·ªÉ t·∫°o ch·ªØ k√Ω s·ªë?", "RSA"),
            ("Thu·∫≠t to√°n n√†o c√≥ th·ªÉ ki·ªÉm tra d·ªØ li·ªáu b·ªã thay ƒë·ªïi?", "SHA"),
            ("AES thu·ªôc lo·∫°i m√£ h√≥a n√†o?", "ƒê·ªëi x·ª©ng"),
            ("RSA thu·ªôc lo·∫°i m√£ h√≥a n√†o?", "B·∫•t ƒë·ªëi x·ª©ng"),
            ("SHA c√≥ th·ªÉ gi·∫£i m√£ ƒë∆∞·ª£c kh√¥ng?", "Kh√¥ng"),
            ("M√£ h√≥a ƒë·ªìng c·∫•u l√† g√¨?", "Homomorphic encryption"),
        ]
        q, a = random.choice(ds_cau_hoi)
        tk.Label(mini_win, text=q, font=("Arial", 12, "bold"), wraplength=480).pack(pady=10)
        ans_var = tk.StringVar()
        entry = tk.Entry(mini_win, textvariable=ans_var, font=("Arial", 12))
        entry.pack(pady=10)
        def check_answer():
            if ans_var.get().strip().lower() == a.lower():
                messagebox.showinfo("Mini-game", "üéâ ƒê√∫ng! B·∫°n ƒë∆∞·ª£c c·ªông 100 ƒëi·ªÉm!")
                self.score += 100
                self.update_status_bar()
                self.cap_nhat_leaderboard()
                mini_win.destroy()
            else:
                messagebox.showwarning("Mini-game", "‚ùå Sai! ƒê√°p √°n ƒë√∫ng l√†: " + a)
                mini_win.destroy()
        tk.Button(mini_win, text="Tr·∫£ l·ªùi", command=check_answer, font=("Arial", 11, "bold"), bg="#27ae60", fg="white").pack(pady=10)
        entry.focus()

    def nhap_ten_nguoi_choi(self):
        ten = None
        while not ten:
            ten = tk.simpledialog.askstring("T√™n ng∆∞·ªùi ch∆°i", "Nh·∫≠p t√™n c·ªßa b·∫°n:")
            if ten is None or ten.strip() == "":
                messagebox.showwarning("C·∫£nh b√°o", "B·∫°n ph·∫£i nh·∫≠p t√™n ƒë·ªÉ ch∆°i!")
                ten = None
        return ten.strip()

    def load_leaderboard(self):
        try:
            if os.path.exists("leaderboard.json"):
                with open("leaderboard.json", "r", encoding="utf-8") as f:
                    return json.load(f)
        except:
            pass
        return {}

    def save_leaderboard(self):
        try:
            with open("leaderboard.json", "w", encoding="utf-8") as f:
                json.dump(self.leaderboard, f, ensure_ascii=False, indent=2)
        except:
            pass

    def cap_nhat_leaderboard(self):
        ten = self.ten_nguoi_choi
        diem = self.score
        if ten in self.leaderboard:
            if diem > self.leaderboard[ten]:
                self.leaderboard[ten] = diem
        else:
            self.leaderboard[ten] = diem
        self.save_leaderboard()

    def on_button_hover(self, button, original_color, entering):
        if entering:
            # Lighter color on hover
            lighter_color = self.lighten_color(original_color, 20)
            button.config(bg=lighter_color)
        else:
            button.config(bg=original_color)
    
    def lighten_color(self, color, percent):
        """Lighten a color by a percentage"""
        # Simple color lightening - you can implement more sophisticated color manipulation
        if color == self.colors['info']:
            return '#5dade2'
        elif color == self.colors['danger']:
            return '#ec7063'
        elif color == self.colors['warning']:
            return '#f7dc6f'
        elif color == self.colors['success']:
            return '#58d68d'
        else:
            return color

def main():
    """Main function to run the game"""
    root = tk.Tk()
    game = BankingEncryptionGame(root)
    root.mainloop()

if __name__ == "__main__":
    main()